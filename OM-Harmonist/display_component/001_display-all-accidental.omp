; OM File Header - Saved 2024/08/05 17:13:27
; (7.02 :patc (om-make-point 119 443) (om-make-point 96 38) (om-make-point 1632 836) "" 183 0 nil "2024/08/05 17:13:27")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "001_display-all-accidental" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 354 34) (quote "opyright © 2016 Jialin LIU. All Rights Reserved.") "" (om-make-point 839 677) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 477 130) (quote "4. If you want to roll back the installation, evaluate the sub-patch \"uninstall the patch\", the display of the score object will be restored in a few milliseconds.") "" (om-make-point 798 343) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 480 66) (quote "x must be a basic tone without accidental$like C3(4800) G4(6700) D9(12200) B2(4700)") "" (om-make-point 24 752) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 157 132) (quote "\"bb\" = x + 12$\"b\"  = x + 38$beca = x + 50$\"#\" = x + 62$\"x\" = x + 88") "" (om-make-point 25 625) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 407 92) (quote "3. double-click the Chord-seq (or other score object), set the Approx(pop-up menu) to \"1/16#tonal\"") "" (om-make-point 0 376) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "file or directory" "TYPE" (quote file) (list (list "file" (quote (quote file))) (list "directory" (quote (quote directory))))) (om-load-inputfunmenu1 (quote input-funmenu) "new or existing" "MODE" (quote existing) (list (list "new" (quote (quote new))) (list "existing" (quote (quote existing))))) (om-load-inputfunmenu1 (quote input-funmenu) "pathname" "INITIAL-FOLDER" (quote desktop) (list (list "home" (quote (quote home))) (list "desktop" (quote (quote desktop))) (list "other" nil))) (om-load-inputfun (quote input-funbox) "prompt for the dialog" "MESSAGE" nil))) (om-make-point 1013 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 250 108) (quote "2. Evaluate the sub-patch \"install the patch\" with key \"v\" , or cmd + click") "" (om-make-point 22 157) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 246 488) (om-make-point 62 30) (list 0 500) "(0 500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 738 132) (quote "                      before use: $<-------------1. Make sure that the \"scales.lisp\" file is in THIS directory!$                      (it is the default directory of OM 6.10.1 in macOS10.10)$                      Otherwise you need to find it and write or choose the $                      correct pathname. (with --------> ") "" (om-make-point 530 17) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 18.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 10 478) (om-make-point 224 40) (list 6000 6012 6038 6050 6062 6088 6200 6212 6238 6250 6262 6288) "(6000 6012 6038 6050 6062 6088 6200 6212 6238 6250 6262 6288)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 54 526) (om-make-point 402 99) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6012) (6038) (6050) (6062) (6088) (6200) (6212) (6238) (6250) (6262) (6288))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 792 84) (om-make-point 1416 855) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "uninstall the patch" (om-load-patch-abs1 "uninstall the patch" (quote ((let ((box (om-load-boxcall (quote lispfun) "LOAD 2" (quote load) (quote ((om-load-inputfun (quote input-funbox) "FILENAME" "FILENAME" nil))) (om-make-point 593 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 306 271) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "load" (om-load-patch-abs1 "load" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 284 229) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LOAD" (quote load) (quote ((om-load-inputfun (quote input-funbox) "FILENAME" "FILENAME" nil))) (om-make-point 292 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 50 50) (om-make-point 519 30) (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device nil :host nil :name "scales" :type "lisp") "#P\"/Applications/OM 6.10.1/code/projects/02-musicproject/editor/scoreeditor/scales.lisp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 845 179) nil (list (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device :unspecific :host nil :name "scales" :type "lisp")) nil "load"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 200 47) (om-make-point 52 30) "text" "\"text\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 148 77) (om-make-point 70 50) (load-buffer-textfile (quote (";OpenMusic" ";" ";Copyright (C) 1997, 1998, 1999, 2000 by IRCAM-Centre Georges Pompidou,Paris, France." ";" ";This program is free software; you can redistribute it and/or" ";modify it under the terms of the GNU General Public License" ";as published by the Free Software Foundation; either version 2" ";of the License, or (at your option) any later version." ";" ";See file LICENSE for further informations on licensing terms." ";" ";This program is distributed in the hope that it will be useful," ";but WITHOUT ANY WARRANTY; without even the implied warranty of" ";MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the" ";GNU General Public License for more details." ";" ";You should have received a copy of the GNU General Public License" ";along with this program; if not, write to the Free Software" ";Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA." ";" ";Authors: Gerard Assayag and Augusto Agon" "" "(in-package :om)" ";===================================================" ";popup + dialog used to change staff size port, etc." ";================================================" "(defvar *all-satff-om*   '(f g g2 f2 gf gg ff gff ggf ggff empty))" "" "(defvar *chord-satff-om* '((\"F\" f) (\"G\" g) (\"GF\" gf) (\"GG\" gg) (\"FF\" ff) (\"GFF\" gff) (\"GGF\" ggf) (\"GGFF\" ggff) (\"EMPTY\" empty)))" "(defvar *voice-satff-om* '((\"F\" f) (\"G\" g) (\"F2\" f2) (\"G2\" g2) (\"EMPTY\" empty)))" "(defvar *mus-font-size* '((\"8\" 8) (\"12\" 12) (\"16\" 16) (\"20\" 20) (\"24\" 24) (\"28\" 28)" "                            (\"36\" 36) (\"48\" 48) (\"60\" 60) (\"72\" 72)))" "" "" "(defclass* scale ()" "    ((alteration-list :initform (list  nil (diese) nil (diese) nil nil (diese) nil (diese) nil (diese) nil) " "                      :initarg :alteration-list :accessor alteration-list)" "     (lines-list :initform (list  0 0 1 1 2 3 3 4 4 5 5 6) " "                 :initarg :lines-list :accessor lines-list)" "     (approx-factor :initform 100 :initarg :approx-factor :accessor approx-factor))" "   (:icon 262))" "" "(defmethod get-slot-in-out-names ((self scale))" "   (values '(\"self\" \"alteration-list\" \"lines-list\" \"approx-factor\")" "           '(nil (nil #\\# nil #\\# nil nil #\\# nil #\\# nil #\\# nil) (0 0 1 1 2 3 3 4 4 5 5 6) 100)" "           '(\"scale object\" \"accidentals\" \"line position\" \"division of 200 (1 ton)\")" "           '(nil nil nil" "                 (( 3 ((\"1\" 200) (\"1/2\" 100) (\"1/3\" 200/3) (\"1/4\" 50) (\"1/5\" 40) (\"1/6\" 100/3) " "                       (\"1/7\" 200/7) (\"1/8\" 25) (\"1/10\" 20)  (\"1/12\" 100/6) (\"1/14\" 100/7) (\"1/16\" 25/2)))))))" "" "(defmethod Class-has-editor-p  ((self scale)) nil)" "" "(defmethod give-alteration  ((self scale) midic)" "    (let* ((vlength (length (lines-list self)))" "           (int-cents (mod midic 1200))" "           (index (round (/ int-cents (approx-factor self) )))" "           (up-octave (truncate (/ index (length (lines-list self))))))" "      (setq index (mod index (length (lines-list self))))" "      (if (and (= (approx-factor self) 25) (= index (1- vlength))) (incf up-octave))" "      (list (nth index  (lines-list self)) (nth  index (alteration-list self)) up-octave)))" "" ";-------1" "(defvar *1-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  nil  nil nil  (diese)  (diese)  (diese))" "      :lines-list (list  0 1 2 3 4 5 )" "      :approx-factor 200))" "" "(defvar *1#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  (diese)  (diese) nil  nil  nil  nil)" "      :lines-list (list  0 1 3 4 5 6 )" "      :approx-factor 200))" "" ";-------2" "(defvar *2-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (diese) nil (diese) nil nil (diese) nil (diese) nil (diese) nil)" "     :lines-list" "     (list  0 0 1 1 2 3 3 4 4 5 5 6)" "     :approx-factor 100))" "" "(defvar *c-major-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (diese)  nil (bemol) nil   nil  (diese) nil (bemol) nil (bemol)  nil)" "     :lines-list" "     (list   0 0 1 2 2 3 3 4 5 5 6 6)" "     :approx-factor 100))" "" "" ";-------3" "(defvar *3-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              #\\# (d-1/3) (d-2/3)" "                              #\\# (d-1/3) (d-2/3)" "                              #\\# (d-1/3) (d-2/3))" "      :lines-list (list  0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5)" "      :approx-factor 200/3))" "" "(defvar *3#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  #\\# (d-1/3) (d-2/3)" "                              #\\# (d-1/3) (d-2/3)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12))" "      :lines-list (list  0 0 0 1 1 1 3 3 3  4 4 4 5 5 5 6 6 6 )" "      :approx-factor 200/3))" "" ";-------4" "(defvar *4-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (t-1/4) (diese) (t-3/4) nil (t-1/4) (diese) (t-3/4) nil (t-1/4) nil (t-1/4) (diese)" "            (t-3/4) nil (t-1/4) (diese) (t-3/4) nil (t-1/4) (diese) (t-3/4) nil (t-1/4))" "     :lines-list" "     (list  0 0 0 0 1 1 1 1 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6)" "     :approx-factor 50))" "" ";-------5" "(defvar *5-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "            nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "            nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "            #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "            #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "            #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5))" "     :lines-list" "     (list  0 0 0 0 0" "            1 1 1 1 1" "            2 2 2 2 2" "            3 3 3 3 3" "            4 4 4 4 4" "            5 5 5 5 5)" "     :approx-factor 40))" "" "(defvar *5#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "                              #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "                              nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "                              nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "                              nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "                               nil (t-2/10) (t-4/10) (t-6/10) (t-8/10))" "      :lines-list (list  0 0 0 0 0" "                         1 1 1 1 1" "                         3 3 3 3 3" "                         4 4 4 4 4" "                         5 5 5 5 5" "                         6 6 6 6 6 )" "      :approx-factor 40))" "" ";-------6" "(defvar *6-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  nil (t-2/12) (t-4/12) (t-1/2) (t-8/12) (t-10/12)" "                              nil (t-2/12) (t-4/12) (t-1/2) (t-8/12) (t-10/12)" "                              nil (t-2/12) (t-4/12) nil (t-2/12) (t-4/12)" "                              #\\# (t-8/12) (t-10/12) nil (t-2/12) (t-4/12)" "                              #\\# (t-8/12) (t-10/12) nil (t-2/12) (t-4/12)" "                              #\\# (t-8/12) (t-10/12) nil (t-2/12) (t-4/12))" "      :lines-list (list  0 0 0 0 0 0" "                         1 1 1 1 1 1" "                         2 2 2 3 3 3" "                         3 3 3 4 4 4" "                         4 4 4 5 5 5" "                         5 5 5 6 6 6)" "      :approx-factor 200/6))" "" "" "" ";-------7" "(defvar *7-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "            nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "            nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "            #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "            #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "            #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7))" "     :lines-list" "     (list  0 0 0 0 0 0 0" "            1 1 1 1 1 1 1" "            2 2 2 2 2 2 2" "            3 3 3 3 3 3 3" "            4 4 4 4 4 4 4" "            5 5 5 5 5 5 5)" "     :approx-factor 200/7))" "" "(defvar *7#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "                              #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "                              nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "                              nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "                              nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14))" "      :lines-list (list  0 0 0 0 0 0 0" "                         1 1 1 1 1 1 1" "                         3 3 3 3 3 3 3" "                         4 4 4 4 4 4 4" "                         5 5 5 5 5 5 5" "                         6 6 6 6 6 6 6 )" "      :approx-factor 200/7))" "" ";-------8" "(defvar *8-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) )" "      :lines-list" "      (list  0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1" "             2 2 2 2 3 3 3 3" "             3 3 3 3 4 4 4 4" "             4 4 4 4 5 5 5 5" "             5 5 5 5 6 6 6 6)" "      :approx-factor 25))" "" ";-------10" "(defvar *10-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/10) (t-2/10) (t-3/10) (t-4/10) (t-5/10) (t-6/10) (t-7/10) (t-8/10) (t-9/10)" "             nil (t-1/10) (t-2/10) (t-3/10) (t-4/10) (t-5/10) (t-6/10) (t-7/10) (t-8/10) (t-9/10)" "             nil (t-1/10) (t-2/10) (t-3/10) (t-4/10) nil (t-1/10) (t-2/10) (t-3/10) (t-4/10)" "             #\\# (t-6/10) (t-7/10) (t-8/10) (t-9/10)  nil (t-1/10) (t-2/10) (t-3/10) (t-4/10)" "             #\\# (t-6/10) (t-7/10) (t-8/10) (t-9/10) nil (t-1/10) (t-2/10) (t-3/10) (t-4/10)" "             #\\# (t-6/10) (t-7/10) (t-8/10) (t-9/10) nil (t-1/10) (t-2/10) (t-3/10) (t-4/10))" "      :lines-list (list  0 0 0 0 0 0 0 0 0 0" "                         1 1 1 1 1 1 1 1 1 1" "                         2 2 2 2 2 3 3 3 3 3" "                         3 3 3 3 3 4 4 4 4 4" "                         4 4 4 4 4 5 5 5 5 5" "                         5 5 5 5 5 6 6 6 6 6)" "      :approx-factor 20))" "" ";-------12" "(defvar *12-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/12) (t-2/12) (t-3/12) (t-4/12) (t-5/12) (t-6/12) (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12)" "             nil (t-1/12) (t-2/12) (t-3/12) (t-4/12) (t-5/12) (t-6/12) (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12)" "             nil (t-1/12) (t-2/12) (t-3/12) (t-4/12) (t-5/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12)" "             #\\# (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12)" "             #\\# (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12)" "             #\\# (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12))" "      :lines-list (list  0 0 0 0 0 0 0 0 0 0 0 0" "                         1 1 1 1 1 1 1 1 1 1 1 1" "                         2 2 2 2 2 2 3 3 3 3 3 3" "                         3 3 3 3 3 3 4 4 4 4 4 4" "                         4 4 4 4 4 4 5 5 5 5 5 5" "                         5 5 5 5 5 5 6 6 6 6 6 6)" "      :approx-factor 200/12))" "" ";-------14" "(defvar *14-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14) (t-7/14) (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14)" "             nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14) (t-7/14) (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14)" "             nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14)" "             #\\# (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14)" "             #\\# (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14)" "             #\\# (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14))" "      :lines-list" "      (list  0 0 0 0 0 0 0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1 1 1 1 1 1 1" "             2 2 2 2 2 2 2 3 3 3 3 3 3 3" "             3 3 3 3 3 3 3 4 4 4 4 4 4 4" "             4 4 4 4 4 4 4 5 5 5 5 5 5 5" "             5 5 5 5 5 5 5 6 6 6 6 6 6 6)" "      :approx-factor 200/14))" "" ";-------16" "(defvar *16-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) )" "      :lines-list" "      (list  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" "             2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3" "             3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4" "             4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5" "             5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6)" "      :approx-factor 200/16))" "" "" "" "(defvar *current-1/2-scale*  *2-tone-chromatic-scale*)" "(defvar *current-1/4-scale* *4-tone-chromatic-scale*)" "(defvar *current-1/8-scale* *8-tone-chromatic-scale*)" "" "(setf *current-1/2-scale*  *2-tone-chromatic-scale*)" "(setf *current-1/4-scale* *4-tone-chromatic-scale*)" "(setf *current-1/8-scale* *8-tone-chromatic-scale*)" "" "" "(defparameter *scales-list* (list " "                             (list 1   *1-tone-chromatic-scale*  \"1\")" "                             (list 1.0 *1#-tone-chromatic-scale* \"1#\")" "                             (list 2   *current-1/2-scale* \"1/2\")" "                             (list 3   *3-tone-chromatic-scale* \"1/3\")" "                             (list 3.0 *3#-tone-chromatic-scale* \"1/3#\")" "                             (list 4   *current-1/4-scale* \"1/4\")" "                             (list 5   *5-tone-chromatic-scale* \"1/5\")" "                             (list 5.0 *5#-tone-chromatic-scale* \"1/5#\")" "                             (list 6   *6-tone-chromatic-scale*  \"1/6\")" "                             (list 7   *7-tone-chromatic-scale*  \"1/7\")" "                             (list 7.0 *7#-tone-chromatic-scale* \"1/7#\")" "                             (list 8   *current-1/8-scale* \"1/8\")" "                             (list 10   *10-tone-chromatic-scale* \"1/10\")" "                             (list 12   *12-tone-chromatic-scale*  \"1/12\")" "                             (list 14   *14-tone-chromatic-scale*  \"1/14\")" "                             (list 16   *16-tone-chromatic-scale* \"1/16\")" "                             ))" "" "" "(defun get-current-scale (tone)" "    (or (cadr (find tone *scales-list* :test 'equal :key 'car))" "        *current-1/2-scale*))" "" "" "(defun default-scale-p (scale)" "    (or (equal *current-1/2-scale* scale)" "        (equal *current-1/4-scale* scale)" "        (equal *current-1/8-scale* scale)))" "" "(defun approx2tone (app)" "  (case app (25 8) (50 4) (100 2) (otherwise (* 2 (/ 100 app)))))" "" "" "(defmethod approx-scale ((self scale) midic &optional (ref-midic 0))" "  (approx-m midic (approx2tone (approx-factor self)) ref-midic))" "" "(defun get-new-scale (tone)" "    (omng-copy (get-current-scale tone)))" "" "(defmethod get-super-default-value ((self (eql 'scale)))" "    (omng-copy (get-current-scale 2)))" "" "(defmethod  omng-copy ((self scale))" "    (make-instance 'scale" "      :alteration-list (copy-list (alteration-list self))" "      :lines-list   (copy-list (lines-list self))" "      :approx-factor   (approx-factor self)))" "" "" "(defmethod scale-midi2pixel ((scale scale) midi top linespace)" "  (let* ((app (approx-factor scale))" "         (topmc (* top 100))" "         (tone (approx2tone app))" "         (midiapp (approx-scale scale midi))" "         (numtones (* 6 tone)))" "    (* (+ (* 3.5 (floor (- topmc midiapp) 1200)) " "                 (lines-from-do (/ (mod (- (* top 100) midiapp) 1200) app) scale numtones) -0.5 ) linespace)))" "" "" "" "" "" ";;;===============================================" "" "(defclass scaleeditor (chordeditor) " "              ((ref-chord :initarg :ref-chord :accessor ref-chord " "                      :initform (make-instance 'chord))))" "" "(defmethod playosc? ((self scaleeditor)) nil)" "(defmethod slotsedit? ((self scaleeditor)) nil)" "(defmethod special-tone ((self scaleeditor)) (approx2tone (approx-factor (object self))))" "(defmethod get-inspector ((self scaleeditor)) nil)" "" "(defmethod Class-has-editor-p  ((self scale)) t)" "(defmethod get-editor-class ((self scale)) 'scaleeditor)" "(defmethod get-help-list ((self scaleeditor)) nil)" "" "(defclass scalepanel (chordpanel) ())" "(defclass omscale-controls-view (omcontrols-view) ())" "" "" "(defmethod get-score-class-panel ((self scaleeditor)) 'scalePanel)" "" "(defmethod get-score-class-ctrls ((self scaleeditor)) 'omscale-controls-view)" "" "(defmethod get-win-ed-size  ((self scale)) (om-make-point 700 200))" "(defmethod get-editor-field-size ((self scaleeditor)) (om-make-point 10000 10))" "" "(defmethod default-edition-params ((self scale))" "  (pairlis '(approx fontsize staff cmnpref deltapict outport inport " "             zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale) " "           (list *global-midi-approx* *music-fontsize* *default-satff* (make-instance 'edition-values) (om-make-point 0 0) " "                 nil nil" "                 1 nil 1000 0 (om-make-point 720 230) (om-make-point 100 100) 0 1 :normal t nil)))" "" "(defmethod objectfromeditor ((self scalepanel)) " "   (ref-chord (editor self)))" "" "(defmethod get-approx-scale ((self scalepanel))  " "  (object (editor self)))" "" "(defmethod editor-default-edit-params ((self scaleeditor))" "  (default-edition-params (ref-chord self)))" "" "" "(defmethod init-boxes-in-score ((self scalepanel)) nil)" "" "(defmethod om-drag-start ((self scalepanel)) nil)" "" "; (get-edit-param (om-make-view 'scaleeditor) 'fontsize)" "" "(defmethod initialize-instance :after ((self scaleeditor) &rest l)" "  (declare (ignore l))" "  (setf (obj-mode (panel self)) 'note)" "  (change-editor-tone (panel self) (approx2tone (approx-factor (object self))))" "  (change-editor-mode (panel self) 3)" "  ;(update-panel (panel self))" "  )" "" "(defmethod change-editor-tone ((self scalepanel) tone)" "  (let ((ref (get-new-scale tone)))" "    (unless (= (approx-factor (object (om-view-container self))) (approx-factor ref))" "      (setf (approx-factor (object (om-view-container self))) (approx-factor ref)" "            (alteration-list (object (om-view-container self))) (alteration-list ref)" "            (lines-list (object (om-view-container self))) (lines-list ref)))" "    (update-chord (om-view-container self))" "    (call-next-method)))" "" "" "(defmethod update-editor-after-eval ((self scaleeditor) val) " "  (om-with-compiler-warnings nil" "    (setf (object self) val)" "    (change-editor-tone (panel self) (approx2tone (approx-factor (object self))))" "    (update-panel (panel self))))" "" "(defmethod update-chord ((self scaleeditor))" "  (setf (ref-chord self) (make-instance 'chord :lmidic (arithm-ser 6000 (- 7200 (approx-factor (object self)))  " "                                                                   (approx-factor (object self))))))" "" "(defmethod report-modifications ((self scaleeditor))" "  (let ((refscale (get-current-scale (get-edit-param self 'approx))))" "    (setf (approx-factor (object self)) (/ 200 (get-edit-param self 'approx)))" "    (setf (alteration-list (object self)) (copy-list (alteration-list refscale)))" "    (setf (lines-list (object self)) (copy-list (lines-list (get-current-scale refscale))))" "  (loop for note in (inside (ref-chord self))" "        for i = 0 then (+ i 1) do" "        (when (tonalite note)" "          (setf (nth i (lines-list (object self))) (+ (nth i (lines-list refscale)) " "                                                           (line-diff (nth i (alteration-list refscale))" "                                                                 (alt-2-str (tonalt (tonalite note))))))" "          (setf (nth i (alteration-list (object self))) (string (alt-2-str (tonalt (tonalite note))))))" "        )" "  (when (and (ref self) (subtypep (type-of (ref self)) 'scoreeditor))" "    (update-panel (panel (ref self))))))" "" "" "(defun line-diff (ref-alt new-alt)" "  (cond ((string-equal (string ref-alt) (string new-alt)) 0)" "        ((equal ref-alt nil) " "         (cond" "          ((string-equal (string new-alt) (string (diese))) -1)" "          ((string-equal (string new-alt) (string (db-diese))) -1)" "          ((string-equal (string new-alt) (string (bemol))) 1)" "          ((string-equal (string new-alt) (string (db-bemol))) 1)" "          (t 0)))" "        ((string-equal ref-alt (string (diese)))" "         (cond" "          ((string-equal (string new-alt) (string (db-diese))) -1)" "          ((string-equal (string new-alt) (string (bemol))) 1)" "          ((string-equal (string new-alt) (string (db-bemol))) 2)" "          (t 0)))" "        ((string-equal ref-alt (string (bemol)))" "         (cond" "          ((string-equal (string new-alt) (string (diese))) -1)" "          ((string-equal (string new-alt) (string (db-diese))) -2)" "          ((string-equal (string new-alt) (string (db-bemol))) 1)" "          (t 0)))" "        (t 0)))" "        " "        " "                             " "" "(defmethod handle-key-event ((self scalepanel) key) nil)" "" "(defmethod om-get-menu-context ((self scaleeditor)) nil)" "" "(defmethod om-get-menu-context ((self scalepanel)) " "  (let ((selection (get-click-in-obj self (graphic-obj self) " "                                     (grap-class-from-type (obj-mode self)) " "                                     (om-mouse-position self))))" "    (when selection " "      (if (= (staff-tone self) 2)" "          (om-get-menu-context selection)" "        (om-beep-msg \"Microtonal scales can not be modified!\")))))" "" "(defmethod om-score-click-handler ((self scalepanel) where double-click-p)" "  (let* ((mode-obj (grap-class-from-type  (obj-mode self)))" "         (graph-obj (get-click-in-obj self (graphic-obj self) mode-obj where)))" "    (when graph-obj " "      (om-popup-menu-context self))" "     (report-modifications (om-view-container self))))" "" "" "" ";;;===================================================" ";;; NEW scales" "" "(defclass atone-scale (scale)" "  ((midic-base :initform 0 :initarg :midic-base :accessor midic-base)))" "" "" "(defmethod approx-scale ((self atone-scale) midic &optional (ref-midic 0))" "  (a-tone-approx-m midic (approx-factor self) (midic-base self)))" "" "(defmethod* a-tone-approx-m  ((midic t) approx-factor base)" "           (let* ((distance (-  midic base))" "                  (steps (floor distance approx-factor))" "                  (interval (- midic (+ base (* steps approx-factor)))))" "             (round (if (< interval (/ approx-factor 2))" "                 (+ base (* steps approx-factor))" "               (+ base (* (+ 1 steps) approx-factor))))))" "" "(defmethod* a-tone-approx-m  ((midic list) approx-factor base)" "           (loop for item in midic collect (a-tone-approx-m item approx-factor base)))" "" "" "(defmethod give-alteration  ((self atone-scale) midic)" "  (let* ((length (length (lines-list self)))" "         (distance (-  midic (midic-base self)))" "         (steps (round distance (approx-factor self))) index)" "    (setf steps (mod steps (length (lines-list self))))" "    (setf index (if (minusp steps) (- length steps) steps))" "    (list (nth index  (lines-list self)) (nth  index (alteration-list self)) 0)))" "" "(defmethod scale-midi2pixel ((scale atone-scale) midi top linespace)" " (let* ((topmc (* top 100))" "        (midiapp (approx-scale scale midi))" "        (octaves (floor (+  (- topmc midiapp) (- (midic-base scale) 6000 (+ (approx-factor scale) -1))) 1200))  ;;; why -1 ?" "        (line (car (give-alteration scale midiapp))))" "   (* (- (* 3.5 (+ 2 octaves)) (+ 4 (/ line 2 ))) linespace)))" "" "" "" ";;;==================" ";;; 31 SCALE (HF)" "" ";(give-alteration *31-equal-scale* 6010)" "" "(defparameter *31-equal-scale*" "    (make-instance 'atone-scale" "      :alteration-list" "      (list  (inv-bemol) nil (t-1/4) (t-1/2) " "             (bemol) (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4) " "             (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4))" "      :lines-list" "      (list  0 0 0 0" "             1 1 1 1 1" "             2 2 2 2 " "             3 3 3 3 " "             4 4 4 4 4" "             5 5 5 5 5" "             6 6 6 6)" "      :approx-factor (/ 1200 31)" "      :midic-base 5971))" "" ";(pushr (list 38.7 *31-equal-scale* \"H.F. 1/31\") *scales-list*)" "" "(defparameter *19-equal-scale*" "  (make-instance 'atone-scale" "                 :alteration-list" "                 (list  (bemol) nil (diese)" "                        (bemol) nil (diese)" "                        (bemol) nil" "                        (bemol) nil (diese)" "                        (bemol) nil (diese)" "                        (bemol) nil (diese)" "                        (bemol) nil)" "      :lines-list" "      (list  0 0 0 " "             1 1 1 " "             2 2  " "             3 3 3  " "             4 4 4 " "             5 5 5 " "             6 6)" "      :approx-factor (/ 1200 19)" "      :midic-base 5952))" "" "" ";(pushr (list 63 *19-equal-scale* \"19 ET\") *scales-list*)" "" "" ";(defparameter *5-equal-scale*" ";  (make-instance 'atone-scale" ";                 :alteration-list (list (bemol) nil (t-1/4) (diese) (t-3/4))" ";                 :lines-list '(0 0 0 0 0)   " ";                :approx-factor (/ 1200 5)" ";                :midic-base 6000))" "" ";(pushr (list 240 *5-equal-scale* \"5 scale\") *scales-list*)           " "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "text") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 203 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 387 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ENSURE-DIRECTORIES-EXIST" (quote ensure-directories-exist) (quote ((om-load-inputfun (quote input-funbox) "PATHSPEC" "PATHSPEC" nil))) (om-make-point 289 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-DATA" (quote save-data) (quote ((om-load-inputfun (quote input-funbox) "data (list, BPF, or TextFile)" "SELF" nil) (om-load-inputfun (quote input-funbox) "a file location" "PATH" "data.txt"))) (om-make-point 195 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (8 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 4 3 nil 0) (1 0 5 0 nil 0) (6 0 7 0 nil 0) (4 0 8 0 nil 0) (7 0 8 1 nil 0))) 7.02 nil "" (om-make-point 24 23) (om-make-point 1416 855)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 799 820/3) nil (list (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device nil :host nil :name "scales" :type "lisp")) nil "uninstall the patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "install the patch" (om-load-patch-abs1 "install the patch" (quote ((let ((box (om-load-boxcall (quote lispfun) "LOAD 2" (quote load) (quote ((om-load-inputfun (quote input-funbox) "FILENAME" "FILENAME" nil))) (om-make-point 501 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "load" (om-load-patch-abs1 "load" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 284 229) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LOAD" (quote load) (quote ((om-load-inputfun (quote input-funbox) "FILENAME" "FILENAME" nil))) (om-make-point 292 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 50 50) (om-make-point 519 30) (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device nil :host nil :name "scales" :type "lisp") "#P\"/Applications/OM 6.10.1/code/projects/02-musicproject/editor/scoreeditor/scales.lisp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 723 402)) (quote nil) (om-make-point 678 273) nil (list (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device :unspecific :host nil :name "scales" :type "lisp")) nil "load"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 313 350) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 217 148) (om-make-point 52 30) "text" "\"text\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 146 182) (om-make-point 103 72) (load-buffer-textfile (quote (";OpenMusic" ";" ";Copyright (C) 1997, 1998, 1999, 2000 by IRCAM-Centre Georges Pompidou,Paris, France." ";" ";This program is free software; you can redistribute it and/or" ";modify it under the terms of the GNU General Public License" ";as published by the Free Software Foundation; either version 2" ";of the License, or (at your option) any later version." ";" ";See file LICENSE for further informations on licensing terms." ";" ";This program is distributed in the hope that it will be useful," ";but WITHOUT ANY WARRANTY; without even the implied warranty of" ";MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the" ";GNU General Public License for more details." ";" ";You should have received a copy of the GNU General Public License" ";along with this program; if not, write to the Free Software" ";Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA." ";" ";Authors: Gerard Assayag and Augusto Agon" "" "(in-package :om)" ";===================================================" ";popup + dialog used to change staff size port, etc." ";================================================" "(defvar *all-satff-om*   '(f g g2 f2 gf gg ff gff ggf ggff empty))" "" "(defvar *chord-satff-om* '((\"F\" f) (\"G\" g) (\"GF\" gf) (\"GG\" gg) (\"FF\" ff) (\"GFF\" gff) (\"GGF\" ggf) (\"GGFF\" ggff) (\"EMPTY\" empty)))" "(defvar *voice-satff-om* '((\"F\" f) (\"G\" g) (\"F2\" f2) (\"G2\" g2) (\"EMPTY\" empty)))" "(defvar *mus-font-size* '((\"8\" 8) (\"12\" 12) (\"16\" 16) (\"20\" 20) (\"24\" 24) (\"28\" 28)" "                            (\"36\" 36) (\"48\" 48) (\"60\" 60) (\"72\" 72)))" "" "" "(defclass* scale ()" "    ((alteration-list :initform (list  nil (diese) nil (diese) nil nil (diese) nil (diese) nil (diese) nil) " "                      :initarg :alteration-list :accessor alteration-list)" "     (lines-list :initform (list  0 0 1 1 2 3 3 4 4 5 5 6) " "                 :initarg :lines-list :accessor lines-list)" "     (approx-factor :initform 100 :initarg :approx-factor :accessor approx-factor))" "   (:icon 262))" "" "(defmethod get-slot-in-out-names ((self scale))" "   (values '(\"self\" \"alteration-list\" \"lines-list\" \"approx-factor\")" "           '(nil (nil #\\# nil #\\# nil nil #\\# nil #\\# nil #\\# nil) (0 0 1 1 2 3 3 4 4 5 5 6) 100)" "           '(\"scale object\" \"accidentals\" \"line position\" \"division of 200 (1 ton)\")" "           '(nil nil nil" "                 (( 3 ((\"1\" 200) (\"1/2\" 100) (\"1/3\" 200/3) (\"1/4\" 50) (\"1/5\" 40) (\"1/6\" 100/3) " "                       (\"1/7\" 200/7) (\"1/8\" 25) (\"1/10\" 20)  (\"1/12\" 100/6) (\"1/14\" 100/7) (\"1/16\" 25/2)))))))" "" "(defmethod Class-has-editor-p  ((self scale)) nil)" "" "(defmethod give-alteration  ((self scale) midic)" "    (let* ((vlength (length (lines-list self)))" "           (int-cents (mod midic 1200))" "           (index (round (/ int-cents (approx-factor self) )))" "           (up-octave (truncate (/ index (length (lines-list self))))))" "      (setq index (mod index (length (lines-list self))))" "      (if (and (= (approx-factor self) 25) (= index (1- vlength))) (incf up-octave))" "      (list (nth index  (lines-list self)) (nth  index (alteration-list self)) up-octave)))" "" ";-------1" "(defvar *1-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  nil  nil nil  (diese)  (diese)  (diese))" "      :lines-list (list  0 1 2 3 4 5 )" "      :approx-factor 200))" "" "(defvar *1#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  (diese)  (diese) nil  nil  nil  nil)" "      :lines-list (list  0 1 3 4 5 6 )" "      :approx-factor 200))" "" ";-------2" "(defvar *2-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (diese) nil (diese) nil nil (diese) nil (diese) nil (diese) nil)" "     :lines-list" "     (list  0 0 1 1 2 3 3 4 4 5 5 6)" "     :approx-factor 100))" "" "(defvar *c-major-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (diese)  nil (bemol) nil   nil  (diese) nil (bemol) nil (bemol)  nil)" "     :lines-list" "     (list   0 0 1 2 2 3 3 4 5 5 6 6)" "     :approx-factor 100))" "" "" ";-------3" "(defvar *3-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              #\\# (d-1/3) (d-2/3)" "                              #\\# (d-1/3) (d-2/3)" "                              #\\# (d-1/3) (d-2/3))" "      :lines-list (list  0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5)" "      :approx-factor 200/3))" "" "(defvar *3#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  #\\# (d-1/3) (d-2/3)" "                              #\\# (d-1/3) (d-2/3)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12)" "                              nil (t-4/12) (t-8/12))" "      :lines-list (list  0 0 0 1 1 1 3 3 3  4 4 4 5 5 5 6 6 6 )" "      :approx-factor 200/3))" "" ";-------4" "(defvar *4-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (t-1/4) (diese) (t-3/4) nil (t-1/4) (diese) (t-3/4) nil (t-1/4) nil (t-1/4) (diese)" "            (t-3/4) nil (t-1/4) (diese) (t-3/4) nil (t-1/4) (diese) (t-3/4) nil (t-1/4))" "     :lines-list" "     (list  0 0 0 0 1 1 1 1 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6)" "     :approx-factor 50))" "" ";-------5" "(defvar *5-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "            nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "            nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "            #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "            #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "            #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5))" "     :lines-list" "     (list  0 0 0 0 0" "            1 1 1 1 1" "            2 2 2 2 2" "            3 3 3 3 3" "            4 4 4 4 4" "            5 5 5 5 5)" "     :approx-factor 40))" "" "(defvar *5#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "                              #\\# (d-1/5) (d-2/5) (d-3/5) (d-4/5)" "                              nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "                              nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "                              nil (t-2/10) (t-4/10) (t-6/10) (t-8/10)" "                               nil (t-2/10) (t-4/10) (t-6/10) (t-8/10))" "      :lines-list (list  0 0 0 0 0" "                         1 1 1 1 1" "                         3 3 3 3 3" "                         4 4 4 4 4" "                         5 5 5 5 5" "                         6 6 6 6 6 )" "      :approx-factor 40))" "" ";-------6" "(defvar *6-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  nil (t-2/12) (t-4/12) (t-1/2) (t-8/12) (t-10/12)" "                              nil (t-2/12) (t-4/12) (t-1/2) (t-8/12) (t-10/12)" "                              nil (t-2/12) (t-4/12) nil (t-2/12) (t-4/12)" "                              #\\# (t-8/12) (t-10/12) nil (t-2/12) (t-4/12)" "                              #\\# (t-8/12) (t-10/12) nil (t-2/12) (t-4/12)" "                              #\\# (t-8/12) (t-10/12) nil (t-2/12) (t-4/12))" "      :lines-list (list  0 0 0 0 0 0" "                         1 1 1 1 1 1" "                         2 2 2 3 3 3" "                         3 3 3 4 4 4" "                         4 4 4 5 5 5" "                         5 5 5 6 6 6)" "      :approx-factor 200/6))" "" "" "" ";-------7" "(defvar *7-tone-chromatic-scale*" "   (make-instance 'scale" "     :alteration-list" "     (list  nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "            nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "            nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "            #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "            #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "            #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7))" "     :lines-list" "     (list  0 0 0 0 0 0 0" "            1 1 1 1 1 1 1" "            2 2 2 2 2 2 2" "            3 3 3 3 3 3 3" "            4 4 4 4 4 4 4" "            5 5 5 5 5 5 5)" "     :approx-factor 200/7))" "" "(defvar *7#-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list (list  #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "                              #\\# (d-1/7) (d-2/7) (d-3/7) (d-4/7) (d-5/7) (d-6/7)" "                              nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "                              nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14)" "                              nil (t-2/14) (t-4/14) (t-6/14) (t-8/14) (t-10/14) (t-12/14))" "      :lines-list (list  0 0 0 0 0 0 0" "                         1 1 1 1 1 1 1" "                         3 3 3 3 3 3 3" "                         4 4 4 4 4 4 4" "                         5 5 5 5 5 5 5" "                         6 6 6 6 6 6 6 )" "      :approx-factor 200/7))" "" ";-------8" "(defvar *8-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) (t-1/2) (t-5/8) (t-3/4) (t-7/8)" "             nil (t-1/8) (t-1/4) (t-3/8) )" "      :lines-list" "      (list  0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1" "             2 2 2 2 3 3 3 3" "             3 3 3 3 4 4 4 4" "             4 4 4 4 5 5 5 5" "             5 5 5 5 6 6 6 6)" "      :approx-factor 25))" "" ";-------10" "(defvar *10-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/10) (t-2/10) (t-3/10) (t-4/10) (t-5/10) (t-6/10) (t-7/10) (t-8/10) (t-9/10)" "             nil (t-1/10) (t-2/10) (t-3/10) (t-4/10) (t-5/10) (t-6/10) (t-7/10) (t-8/10) (t-9/10)" "             nil (t-1/10) (t-2/10) (t-3/10) (t-4/10) nil (t-1/10) (t-2/10) (t-3/10) (t-4/10)" "             #\\# (t-6/10) (t-7/10) (t-8/10) (t-9/10)  nil (t-1/10) (t-2/10) (t-3/10) (t-4/10)" "             #\\# (t-6/10) (t-7/10) (t-8/10) (t-9/10) nil (t-1/10) (t-2/10) (t-3/10) (t-4/10)" "             #\\# (t-6/10) (t-7/10) (t-8/10) (t-9/10) nil (t-1/10) (t-2/10) (t-3/10) (t-4/10))" "      :lines-list (list  0 0 0 0 0 0 0 0 0 0" "                         1 1 1 1 1 1 1 1 1 1" "                         2 2 2 2 2 3 3 3 3 3" "                         3 3 3 3 3 4 4 4 4 4" "                         4 4 4 4 4 5 5 5 5 5" "                         5 5 5 5 5 6 6 6 6 6)" "      :approx-factor 20))" "" ";-------12" "(defvar *12-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/12) (t-2/12) (t-3/12) (t-4/12) (t-5/12) (t-6/12) (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12)" "             nil (t-1/12) (t-2/12) (t-3/12) (t-4/12) (t-5/12) (t-6/12) (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12)" "             nil (t-1/12) (t-2/12) (t-3/12) (t-4/12) (t-5/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12)" "             #\\# (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12)" "             #\\# (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12)" "             #\\# (t-7/12) (t-8/12) (t-9/12) (t-10/12) (t-11/12) nil (t-1/12)  (t-2/12) (t-3/12) (t-4/12) (t-5/12))" "      :lines-list (list  0 0 0 0 0 0 0 0 0 0 0 0" "                         1 1 1 1 1 1 1 1 1 1 1 1" "                         2 2 2 2 2 2 3 3 3 3 3 3" "                         3 3 3 3 3 3 4 4 4 4 4 4" "                         4 4 4 4 4 4 5 5 5 5 5 5" "                         5 5 5 5 5 5 6 6 6 6 6 6)" "      :approx-factor 200/12))" "" ";-------14" "(defvar *14-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14) (t-7/14) (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14)" "             nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14) (t-7/14) (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14)" "             nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14)" "             #\\# (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14)" "             #\\# (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14)" "             #\\# (t-8/14) (t-9/14) (t-10/14) (t-11/14) (t-12/14) (t-13/14) nil (t-1/14) (t-2/14) (t-3/14) (t-4/14) (t-5/14) (t-6/14))" "      :lines-list" "      (list  0 0 0 0 0 0 0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1 1 1 1 1 1 1" "             2 2 2 2 2 2 2 3 3 3 3 3 3 3" "             3 3 3 3 3 3 3 4 4 4 4 4 4 4" "             4 4 4 4 4 4 4 5 5 5 5 5 5 5" "             5 5 5 5 5 5 5 6 6 6 6 6 6 6)" "      :approx-factor 200/14))" "" ";-------16" "(defvar *16-tone-chromatic-scale*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) (t-1/2) (t-9/16) (t-5/8) (t-11/16) (t-3/4) (t-13/16) (t-7/8) (t-15/16)" "             nil (t-1/16) (t-1/8) (t-3/16) (t-1/4) (t-5/16) (t-3/8) (t-7/16) )" "      :lines-list" "      (list  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" "             2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3" "             3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4" "             4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5" "             5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6)" "      :approx-factor 200/16))" "" "(defvar *16-tone-chromatic-scale-tonal*" "    (make-instance 'scale" "      :alteration-list" "      (list  nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese) nil nil nil nil nil nil nil nil" "             nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese) nil nil nil nil nil nil nil nil" "             nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese)" "             nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese) nil nil nil nil nil nil nil nil" "             nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese) nil nil nil nil nil nil nil nil" "             nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese) nil nil nil nil nil nil nil nil" "             nil (db-bemol) nil (bemol) (beca) (diese) nil (db-diese))" "      :lines-list" "      (list  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" "             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" "             2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3" "             3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4" "             4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5" "             5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6)" "      :approx-factor 200/16))" "" "" "" "(defvar *current-1/2-scale*  *2-tone-chromatic-scale*)" "(defvar *current-1/4-scale* *4-tone-chromatic-scale*)" "(defvar *current-1/8-scale* *8-tone-chromatic-scale*)" "" "(setf *current-1/2-scale*  *2-tone-chromatic-scale*)" "(setf *current-1/4-scale* *4-tone-chromatic-scale*)" "(setf *current-1/8-scale* *8-tone-chromatic-scale*)" "" "" "(defparameter *scales-list* (list " "                             (list 1   *1-tone-chromatic-scale*  \"1\")" "                             (list 1.0 *1#-tone-chromatic-scale* \"1#\")" "                             (list 2   *current-1/2-scale* \"1/2\")" "                             (list 3   *3-tone-chromatic-scale* \"1/3\")" "                             (list 3.0 *3#-tone-chromatic-scale* \"1/3#\")" "                             (list 4   *current-1/4-scale* \"1/4\")" "                             (list 5   *5-tone-chromatic-scale* \"1/5\")" "                             (list 5.0 *5#-tone-chromatic-scale* \"1/5#\")" "                             (list 6   *6-tone-chromatic-scale*  \"1/6\")" "                             (list 7   *7-tone-chromatic-scale*  \"1/7\")" "                             (list 7.0 *7#-tone-chromatic-scale* \"1/7#\")" "                             (list 8   *current-1/8-scale* \"1/8\")" "                             (list 10   *10-tone-chromatic-scale* \"1/10\")" "                             (list 12   *12-tone-chromatic-scale*  \"1/12\")" "                             (list 14   *14-tone-chromatic-scale*  \"1/14\")" "                             (list 16   *16-tone-chromatic-scale* \"1/16\")" "                             (list 16.0 *16-tone-chromatic-scale-tonal* \"1/16#tonal\")" "                             ))" "" "" "(defun get-current-scale (tone)" "    (or (cadr (find tone *scales-list* :test 'equal :key 'car))" "        *current-1/2-scale*))" "" "" "(defun default-scale-p (scale)" "    (or (equal *current-1/2-scale* scale)" "        (equal *current-1/4-scale* scale)" "        (equal *current-1/8-scale* scale)))" "" "(defun approx2tone (app)" "  (case app (25 8) (50 4) (100 2) (otherwise (* 2 (/ 100 app)))))" "" "" "(defmethod approx-scale ((self scale) midic &optional (ref-midic 0))" "  (approx-m midic (approx2tone (approx-factor self)) ref-midic))" "" "(defun get-new-scale (tone)" "    (omng-copy (get-current-scale tone)))" "" "(defmethod get-super-default-value ((self (eql 'scale)))" "    (omng-copy (get-current-scale 2)))" "" "(defmethod  omng-copy ((self scale))" "    (make-instance 'scale" "      :alteration-list (copy-list (alteration-list self))" "      :lines-list   (copy-list (lines-list self))" "      :approx-factor   (approx-factor self)))" "" "" "(defmethod scale-midi2pixel ((scale scale) midi top linespace)" "  (let* ((app (approx-factor scale))" "         (topmc (* top 100))" "         (tone (approx2tone app))" "         (midiapp (approx-scale scale midi))" "         (numtones (* 6 tone)))" "    (* (+ (* 3.5 (floor (- topmc midiapp) 1200)) " "                 (lines-from-do (/ (mod (- (* top 100) midiapp) 1200) app) scale numtones) -0.5 ) linespace)))" "" "" "" "" "" ";;;===============================================" "" "(defclass scaleeditor (chordeditor) " "              ((ref-chord :initarg :ref-chord :accessor ref-chord " "                      :initform (make-instance 'chord))))" "" "(defmethod playosc? ((self scaleeditor)) nil)" "(defmethod slotsedit? ((self scaleeditor)) nil)" "(defmethod special-tone ((self scaleeditor)) (approx2tone (approx-factor (object self))))" "(defmethod get-inspector ((self scaleeditor)) nil)" "" "(defmethod Class-has-editor-p  ((self scale)) t)" "(defmethod get-editor-class ((self scale)) 'scaleeditor)" "(defmethod get-help-list ((self scaleeditor)) nil)" "" "(defclass scalepanel (chordpanel) ())" "(defclass omscale-controls-view (omcontrols-view) ())" "" "" "(defmethod get-score-class-panel ((self scaleeditor)) 'scalePanel)" "" "(defmethod get-score-class-ctrls ((self scaleeditor)) 'omscale-controls-view)" "" "(defmethod get-win-ed-size  ((self scale)) (om-make-point 700 200))" "(defmethod get-editor-field-size ((self scaleeditor)) (om-make-point 10000 10))" "" "(defmethod default-edition-params ((self scale))" "  (pairlis '(approx fontsize staff cmnpref deltapict outport inport " "             zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale) " "           (list *global-midi-approx* *music-fontsize* *default-satff* (make-instance 'edition-values) (om-make-point 0 0) " "                 nil nil" "                 1 nil 1000 0 (om-make-point 720 230) (om-make-point 100 100) 0 1 :normal t nil)))" "" "(defmethod objectfromeditor ((self scalepanel)) " "   (ref-chord (editor self)))" "" "(defmethod get-approx-scale ((self scalepanel))  " "  (object (editor self)))" "" "(defmethod editor-default-edit-params ((self scaleeditor))" "  (default-edition-params (ref-chord self)))" "" "" "(defmethod init-boxes-in-score ((self scalepanel)) nil)" "" "(defmethod om-drag-start ((self scalepanel)) nil)" "" "; (get-edit-param (om-make-view 'scaleeditor) 'fontsize)" "" "(defmethod initialize-instance :after ((self scaleeditor) &rest l)" "  (declare (ignore l))" "  (setf (obj-mode (panel self)) 'note)" "  (change-editor-tone (panel self) (approx2tone (approx-factor (object self))))" "  (change-editor-mode (panel self) 3)" "  ;(update-panel (panel self))" "  )" "" "(defmethod change-editor-tone ((self scalepanel) tone)" "  (let ((ref (get-new-scale tone)))" "    (unless (= (approx-factor (object (om-view-container self))) (approx-factor ref))" "      (setf (approx-factor (object (om-view-container self))) (approx-factor ref)" "            (alteration-list (object (om-view-container self))) (alteration-list ref)" "            (lines-list (object (om-view-container self))) (lines-list ref)))" "    (update-chord (om-view-container self))" "    (call-next-method)))" "" "" "(defmethod update-editor-after-eval ((self scaleeditor) val) " "  (om-with-compiler-warnings nil" "    (setf (object self) val)" "    (change-editor-tone (panel self) (approx2tone (approx-factor (object self))))" "    (update-panel (panel self))))" "" "(defmethod update-chord ((self scaleeditor))" "  (setf (ref-chord self) (make-instance 'chord :lmidic (arithm-ser 6000 (- 7200 (approx-factor (object self)))  " "                                                                   (approx-factor (object self))))))" "" "(defmethod report-modifications ((self scaleeditor))" "  (let ((refscale (get-current-scale (get-edit-param self 'approx))))" "    (setf (approx-factor (object self)) (/ 200 (get-edit-param self 'approx)))" "    (setf (alteration-list (object self)) (copy-list (alteration-list refscale)))" "    (setf (lines-list (object self)) (copy-list (lines-list (get-current-scale refscale))))" "  (loop for note in (inside (ref-chord self))" "        for i = 0 then (+ i 1) do" "        (when (tonalite note)" "          (setf (nth i (lines-list (object self))) (+ (nth i (lines-list refscale)) " "                                                           (line-diff (nth i (alteration-list refscale))" "                                                                 (alt-2-str (tonalt (tonalite note))))))" "          (setf (nth i (alteration-list (object self))) (string (alt-2-str (tonalt (tonalite note))))))" "        )" "  (when (and (ref self) (subtypep (type-of (ref self)) 'scoreeditor))" "    (update-panel (panel (ref self))))))" "" "" "(defun line-diff (ref-alt new-alt)" "  (cond ((string-equal (string ref-alt) (string new-alt)) 0)" "        ((equal ref-alt nil) " "         (cond" "          ((string-equal (string new-alt) (string (diese))) -1)" "          ((string-equal (string new-alt) (string (db-diese))) -1)" "          ((string-equal (string new-alt) (string (bemol))) 1)" "          ((string-equal (string new-alt) (string (db-bemol))) 1)" "          (t 0)))" "        ((string-equal ref-alt (string (diese)))" "         (cond" "          ((string-equal (string new-alt) (string (db-diese))) -1)" "          ((string-equal (string new-alt) (string (bemol))) 1)" "          ((string-equal (string new-alt) (string (db-bemol))) 2)" "          (t 0)))" "        ((string-equal ref-alt (string (bemol)))" "         (cond" "          ((string-equal (string new-alt) (string (diese))) -1)" "          ((string-equal (string new-alt) (string (db-diese))) -2)" "          ((string-equal (string new-alt) (string (db-bemol))) 1)" "          (t 0)))" "        (t 0)))" "        " "        " "                             " "" "(defmethod handle-key-event ((self scalepanel) key) nil)" "" "(defmethod om-get-menu-context ((self scaleeditor)) nil)" "" "(defmethod om-get-menu-context ((self scalepanel)) " "  (let ((selection (get-click-in-obj self (graphic-obj self) " "                                     (grap-class-from-type (obj-mode self)) " "                                     (om-mouse-position self))))" "    (when selection " "      (if (= (staff-tone self) 2)" "          (om-get-menu-context selection)" "        (om-beep-msg \"Microtonal scales can not be modified!\")))))" "" "(defmethod om-score-click-handler ((self scalepanel) where double-click-p)" "  (let* ((mode-obj (grap-class-from-type  (obj-mode self)))" "         (graph-obj (get-click-in-obj self (graphic-obj self) mode-obj where)))" "    (when graph-obj " "      (om-popup-menu-context self))" "     (report-modifications (om-view-container self))))" "" "" "" ";;;===================================================" ";;; NEW scales" "" "(defclass atone-scale (scale)" "  ((midic-base :initform 0 :initarg :midic-base :accessor midic-base)))" "" "" "(defmethod approx-scale ((self atone-scale) midic &optional (ref-midic 0))" "  (a-tone-approx-m midic (approx-factor self) (midic-base self)))" "" "(defmethod* a-tone-approx-m  ((midic t) approx-factor base)" "           (let* ((distance (-  midic base))" "                  (steps (floor distance approx-factor))" "                  (interval (- midic (+ base (* steps approx-factor)))))" "             (round (if (< interval (/ approx-factor 2))" "                 (+ base (* steps approx-factor))" "               (+ base (* (+ 1 steps) approx-factor))))))" "" "(defmethod* a-tone-approx-m  ((midic list) approx-factor base)" "           (loop for item in midic collect (a-tone-approx-m item approx-factor base)))" "" "" "(defmethod give-alteration  ((self atone-scale) midic)" "  (let* ((length (length (lines-list self)))" "         (distance (-  midic (midic-base self)))" "         (steps (round distance (approx-factor self))) index)" "    (setf steps (mod steps (length (lines-list self))))" "    (setf index (if (minusp steps) (- length steps) steps))" "    (list (nth index  (lines-list self)) (nth  index (alteration-list self)) 0)))" "" "(defmethod scale-midi2pixel ((scale atone-scale) midi top linespace)" " (let* ((topmc (* top 100))" "        (midiapp (approx-scale scale midi))" "        (octaves (floor (+  (- topmc midiapp) (- (midic-base scale) 6000 (+ (approx-factor scale) -1))) 1200))  ;;; why -1 ?" "        (line (car (give-alteration scale midiapp))))" "   (* (- (* 3.5 (+ 2 octaves)) (+ 4 (/ line 2 ))) linespace)))" "" "" "" ";;;==================" ";;; 31 SCALE (HF)" "" ";(give-alteration *31-equal-scale* 6010)" "" "(defparameter *31-equal-scale*" "    (make-instance 'atone-scale" "      :alteration-list" "      (list  (inv-bemol) nil (t-1/4) (t-1/2) " "             (bemol) (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4) " "             (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4) (t-1/2)" "             (bemol) (inv-bemol) nil (t-1/4))" "      :lines-list" "      (list  0 0 0 0" "             1 1 1 1 1" "             2 2 2 2 " "             3 3 3 3 " "             4 4 4 4 4" "             5 5 5 5 5" "             6 6 6 6)" "      :approx-factor (/ 1200 31)" "      :midic-base 5971))" "" ";(pushr (list 38.7 *31-equal-scale* \"H.F. 1/31\") *scales-list*)" "" "(defparameter *19-equal-scale*" "  (make-instance 'atone-scale" "                 :alteration-list" "                 (list  (bemol) nil (diese)" "                        (bemol) nil (diese)" "                        (bemol) nil" "                        (bemol) nil (diese)" "                        (bemol) nil (diese)" "                        (bemol) nil (diese)" "                        (bemol) nil)" "      :lines-list" "      (list  0 0 0 " "             1 1 1 " "             2 2  " "             3 3 3  " "             4 4 4 " "             5 5 5 " "             6 6)" "      :approx-factor (/ 1200 19)" "      :midic-base 5952))" "" "" ";(pushr (list 63 *19-equal-scale* \"19 ET\") *scales-list*)" "" "" ";(defparameter *5-equal-scale*" ";  (make-instance 'atone-scale" ";                 :alteration-list (list (bemol) nil (t-1/4) (diese) (t-3/4))" ";                 :lines-list '(0 0 0 0 0)   " ";                :approx-factor (/ 1200 5)" ";                :midic-base 6000))" "" ";(pushr (list 240 *5-equal-scale* \"5 scale\") *scales-list*)           " "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "text") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 468) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 387 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ENSURE-DIRECTORIES-EXIST" (quote ensure-directories-exist) (quote ((om-load-inputfun (quote input-funbox) "PATHSPEC" "PATHSPEC" nil))) (om-make-point 333 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-DATA" (quote save-data) (quote ((om-load-inputfun (quote input-funbox) "data (list, BPF, or TextFile)" "SELF" nil) (om-load-inputfun (quote input-funbox) "a file location" "PATH" "data.txt"))) (om-make-point 239 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (8 0 2 0 nil 0) (0 0 2 1 nil 0) (3 0 4 3 nil 0) (2 0 5 0 nil 0) (6 0 7 0 nil 0) (4 0 8 0 nil 0) (7 0 8 1 nil 0))) 7.02 nil "" (om-make-point 24 38) (om-make-point 1416 855)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 163 244/3) nil (list (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device nil :host nil :name "scales" :type "lisp")) nil "install the patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 9 45) (om-make-point 519 30) (om-make-pathname :directory (quote (:absolute "Applications" "OM 6.10.1" "code" "projects" "02-musicproject" "editor" "scoreeditor")) :device nil :host nil :name "scales" :type "lisp") "#P\"/Applications/OM 6.10.1/code/projects/02-musicproject/editor/scoreeditor/scales.lisp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 10 1 nil 0) (7 0 10 2 nil 0) (13 0 11 0 nil 0) (13 0 12 0 nil 0))) nil 7.02))
